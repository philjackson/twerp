// Generated by CoffeeScript 1.6.3
var Runner, TwerpTest, util, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require("util");

TwerpTest = require("../../lib/twerptest").TwerpTest;

Runner = require("../runner").Runner;

exports.Simple = (function(_super) {
  __extends(Simple, _super);

  function Simple() {
    this.onRunEnd = __bind(this.onRunEnd, this);
    this.onAssertionFail = __bind(this.onAssertionFail, this);
    this.onAssertionPass = __bind(this.onAssertionPass, this);
    this.onEndTest = __bind(this.onEndTest, this);
    _ref = Simple.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Simple.prototype.onStartFile = function(filename) {
    return util.puts("" + filename + ":");
  };

  Simple.prototype.onStartClass = function(classname) {
    return util.puts("  " + classname + ":");
  };

  Simple.prototype.onEndClass = function(classname) {};

  Simple.prototype.onStartTest = function(testname) {
    return util.print("    " + testname + ": ");
  };

  Simple.prototype.onEndTest = function(testname, res) {
    var bad_count, colour, msg;
    msg = " " + res.passed + "/" + res.count + " passed";
    if (res.expected) {
      bad_count = res.expected !== res.count;
      colour = bad_count ? this.red : this.green;
      msg += " (" + (colour(res.expected)) + " expected" + (bad_count ? '!' : void 0) + ")";
    }
    return util.puts("" + msg + ".");
  };

  Simple.prototype.onAssertionPass = function() {
    return util.print(this.green("."));
  };

  Simple.prototype.onAssertionFail = function(e) {
    var errs, spcr;
    spcr = "\n      ";
    errs = e.stack.split("\n");
    errs[0] = this.red(errs[0]);
    return util.print("" + spcr + (errs.join(spcr)));
  };

  Simple.prototype.onRunEnd = function(summary) {
    util.puts("Time taken: " + summary.time);
    util.puts("Passed:     " + summary.passed);
    return util.puts("Failed:     " + summary.failed);
  };

  return Simple;

})(Runner);
